<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[M.]]></title><description><![CDATA[i'm a performing monkey]]></description><link>https://m.nkey.co/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 02 Jun 2019 09:11:15 GMT</lastBuildDate><item><title><![CDATA[Boléro]]></title><description><![CDATA[<p>1928 年舞蹈家 Ida Rubinstein 邀请 Ravel 将钢琴组曲 Iberia 改编为管弦乐，但当 Ravel 开始改编工作时，得知管弦乐的改编权已经授权给了西班牙的指挥家 Arbós。当 Arbós 得知此事后表示愿意授权给 Ravel 进行改编，但是 Ravel 毅然拒绝表示要创作一首全新的乐曲，也就是后来的 Boléro 。</p>
<p>Beléro 的整体音乐结构就是一段旋律不停重复，在速度上没有任何变化，只是不停叠加乐器，从一开始的军鼓到管乐、弦乐和打击乐，一层一层不停叠加让乐曲逐渐丰富（Loop 音乐的鼻祖？）。</p>
<p>Boléro 的演奏时长 Ravel 比较偏好 17 分钟，但是很多乐团觉得过于缓慢，演奏过 15 分钟、14 分钟甚至 12 分钟的版本，Ravel 对此表示强烈的不满，并在乐谱上标注要以非常慢非常慢的速度演奏。</p>
]]></description><link>https://music.163.com/#/song?id=27091458</link><guid isPermaLink="false">https://m.nkey.co//bolero/</guid><pubDate>Sat, 01 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;1928 年舞蹈家 Ida Rubinstein 邀请 Ravel 将钢琴组曲 Iberia 改编为管弦乐，但当 Ravel 开始改编工作时，得知管弦乐的改编权已经授权给了西班牙的指挥家 Arbós。当 Arbós 得知此事后表示愿意授权给 Ravel 进行改编，但是 Ravel 毅然拒绝表示要创作一首全新的乐曲，也就是后来的 Boléro 。&lt;/p&gt;
&lt;p&gt;Beléro 的整体音乐结构就是一段旋律不停重复，在速度上没有任何变化，只是不停叠加乐器，从一开始的军鼓到管乐、弦乐和打击乐，一层一层不停叠加让乐曲逐渐丰富（Loop 音乐的鼻祖？）。&lt;/p&gt;
&lt;p&gt;Boléro 的演奏时长 Ravel 比较偏好 17 分钟，但是很多乐团觉得过于缓慢，演奏过 15 分钟、14 分钟甚至 12 分钟的版本，Ravel 对此表示强烈的不满，并在乐谱上标注要以非常慢非常慢的速度演奏。&lt;/p&gt;
&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[基于浏览器缓存的旁路攻击]]></title><description><![CDATA[<p>通过记录页面或页面独有的静态资源的加载时间，判断用户访问过的页面、搜索过的关键字等等。</p>
<h2></h2>
]]></description><link>http://sirdarckcat.blogspot.com/2019/03/http-cache-cross-site-leaks.html</link><guid isPermaLink="false">https://m.nkey.co//xsleaks/</guid><pubDate>Fri, 31 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;通过记录页面或页面独有的静态资源的加载时间，判断用户访问过的页面、搜索过的关键字等等。&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[Sec Fetch]]></title><description><![CDATA[<p>从浏览器发起的请求在请求头里, 会带上从哪里发起的，例如 &#x3C;picture> 标签就会带上 <code class="language-text">Sec-Fetch-Dest: image</code>。这样就能在服务端判断出是不是由于 XSS 导致一些恶意的请求了</p>
]]></description><link>https://mikewest.github.io/sec-metadata/#framework</link><guid isPermaLink="false">https://m.nkey.co//sec-fetch/</guid><pubDate>Wed, 03 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;从浏览器发起的请求在请求头里, 会带上从哪里发起的，例如 &amp;#x3C;picture&gt; 标签就会带上 &lt;code class=&quot;language-text&quot;&gt;Sec-Fetch-Dest: image&lt;/code&gt;。这样就能在服务端判断出是不是由于 XSS 导致一些恶意的请求了&lt;/p&gt;
&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[CloudABI]]></title><description><![CDATA[<p>轻量级的沙盒环境。拦截 System Call 调用，检查请求的资源是否符合配置文件中对应的配置，从而避免恶意的操作。例如常见的恶意文件包含 <code class="language-text">../../../etc/passwd</code></p>
]]></description><link>https://cloudabi.org</link><guid isPermaLink="false">https://m.nkey.co//webabi/</guid><pubDate>Fri, 29 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;轻量级的沙盒环境。拦截 System Call 调用，检查请求的资源是否符合配置文件中对应的配置，从而避免恶意的操作。例如常见的恶意文件包含 &lt;code class=&quot;language-text&quot;&gt;../../../etc/passwd&lt;/code&gt;&lt;/p&gt;
&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[通过 document.cookie 设置的 cookie 最长时间不能超过 7 天]]></title><link>https://groups.google.com/forum/#!msg/mozilla.dev.platform/lECBPeiGTy4/cPP52vyZAwAJ</link><guid isPermaLink="false">https://m.nkey.co//document-cookie-maximum-life-time/</guid><pubDate>Sat, 09 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[KV Storage]]></title><description><![CDATA[<p>IndexedDB 使用过于麻烦，同步的 API 操作也会阻塞主线程的渲染，于是在顶层实现了一个类似 localStorage 的接口。同时这也是浏览器 <a href="https://github.com/tc39/proposal-javascript-standard-library">标准库</a> 实现的第一个方法</p>
]]></description><link>https://wicg.github.io/kv-storage/</link><guid isPermaLink="false">https://m.nkey.co//kv-storage/</guid><pubDate>Thu, 07 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;IndexedDB 使用过于麻烦，同步的 API 操作也会阻塞主线程的渲染，于是在顶层实现了一个类似 localStorage 的接口。同时这也是浏览器 &lt;a href=&quot;https://github.com/tc39/proposal-javascript-standard-library&quot;&gt;标准库&lt;/a&gt; 实现的第一个方法&lt;/p&gt;
&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[Instant Page]]></title><description><![CDATA[<p>通过监听 mouseover / touchstart 停留超过 65ms 的链接，就发起请求预加载链接的内容，让用户产生页面加载变快的幻觉</p>
]]></description><link>https://instant.page/</link><guid isPermaLink="false">https://m.nkey.co//instant-page/</guid><pubDate>Tue, 12 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;通过监听 mouseover / touchstart 停留超过 65ms 的链接，就发起请求预加载链接的内容，让用户产生页面加载变快的幻觉&lt;/p&gt;
&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[Array.prototype.sort 有了稳定的排序算法实现]]></title><description><![CDATA[<p>Chrome 70 / V8 v7.0 之后 Array.prototype.sort 将 <a href="https://github.com/v8/v8/blob/6.9.427.17/src/js/array.js#L647">长度大于 10 数组</a> 的排序算法由 <a href="https://en.wikipedia.org/wiki/Quicksort">QuickSort</a> 改为稳定的排序算法 <a href="https://en.wikipedia.org/wiki/Timsort">TimSort</a></p>
]]></description><link>https://github.com/tc39/ecma262/pull/1340</link><guid isPermaLink="false">https://m.nkey.co//make-array-proptype-sort-stable/</guid><pubDate>Mon, 17 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Chrome 70 / V8 v7.0 之后 Array.prototype.sort 将 &lt;a href=&quot;https://github.com/v8/v8/blob/6.9.427.17/src/js/array.js#L647&quot;&gt;长度大于 10 数组&lt;/a&gt; 的排序算法由 &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort&quot;&gt;QuickSort&lt;/a&gt; 改为稳定的排序算法 &lt;a href=&quot;https://en.wikipedia.org/wiki/Timsort&quot;&gt;TimSort&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;稳定性&lt;/h2&gt;
&lt;p&gt;排序算法的稳定性是指在算法处理之后，两个相等键值的记录，是否会改变顺序。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[IIB Awards 2018]]></title><description><![CDATA[<p>可视化奖项 Information is Beautiful Awards 2018 年的获奖名单</p>
]]></description><link>https://www.informationisbeautifulawards.com/news/323-information-is-beautiful-awards-2018-the-winners</link><guid isPermaLink="false">https://m.nkey.co//iib-awards-2018/</guid><pubDate>Thu, 06 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;可视化奖项 Information is Beautiful Awards 2018 年的获奖名单&lt;/p&gt;
&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[MILLENNIALS ARE SCREWED]]></title><description><![CDATA[<p>霍芬顿邮报关于 <a href="https://zh.wikipedia.org/wiki/Y%E4%B8%96%E4%BB%A3">千禧一代</a> 财务危机的专题报道</p>
]]></description><link>https://highline.huffingtonpost.com/articles/en/poor-millennials/</link><guid isPermaLink="false">https://m.nkey.co//poor-millennials/</guid><pubDate>Sat, 13 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;霍芬顿邮报关于 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Y%E4%B8%96%E4%BB%A3&quot;&gt;千禧一代&lt;/a&gt; 财务危机的专题报道&lt;/p&gt;
&lt;!-- more --&gt;</content:encoded></item><item><title><![CDATA[Site Isolation]]></title><description><![CDATA[<p>Chrome 67 以后浏览器会默认启用名为 Site Isolation 的安全功能于避免之前的 Meltdown 和 Spectre 等旁路攻击</p>
]]></description><link>https://m.nkey.co//site-isolation/</link><guid isPermaLink="false">https://m.nkey.co//site-isolation/</guid><pubDate>Mon, 01 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Chrome 67 以后浏览器会默认启用名为 Site Isolation 的安全功能于避免之前的 Meltdown 和 Spectre 等旁路攻击&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2&gt;CPU 预执行&lt;/h2&gt;
&lt;p&gt;从所周知的，CPU 的速度比内存的读写快非常多，所以为了提高 CPU 的利用率人们想到 &lt;strong&gt;预执行&lt;/strong&gt; 这个方案。比如下面这段代码，&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  a &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正常的流程是先执行 if 的条件判断，如果成功再执行加法运算。而预执行的流程则是直接先把加运算执行，如果判断成功就保留结果，不成功则抛弃这个结果。&lt;/p&gt;
&lt;p&gt;而这时我们把 if 代码块改为一个数组的访问,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通常我们访问的索引超出了这个数组的长度，程序检查后就会返回 &lt;strong&gt;undefined&lt;/strong&gt;。但是预执行是 CPU 的行为，所以这里就会跳过程序的检测，直接读到内存中其他块的内容。于是就造成了敏感信息泄露的风险。&lt;/p&gt;
&lt;h2&gt;进程模型&lt;/h2&gt;
&lt;p&gt;Chrome 之前的进程模型叫做 process-per-site-instance (一个 Tab 一个进程)，现在引入了一个新的模型 site-per-process (一个站点一个进程)。&lt;/p&gt;
&lt;p&gt;这两个看起来似乎差不多，因为通常一个 Tab 只会有一个站点的内容，但是我们可以通过 iframe 去引用非本站的页面，这样就能将非本站的内容读入到当前的进程中。&lt;/p&gt;
&lt;h2&gt;Cross-Origin Read Blocking (CORB)&lt;/h2&gt;
&lt;p&gt;在通进程模型限制让不同站点的页面在不同进程以后，我们仍然可以通过其他手段去读取其他页面的内容。例如黑客在扫描内网服务时，通常会使用 img / link / video 等等标签去尝试加在内网页面以探测内网启用的服务。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://192.168.0.1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;link&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时这部分资源浏览器在尝试解析的时候，发现格式不正确解析失败，但是这些内容仍然会驻留在当前进程中，就可以通过上提到的旁路攻击去尝试读那部分内存。&lt;/p&gt;
&lt;p&gt;但是我们不能限制非同源的静态资源，或者将这些静态资源也分割到不同进程中去，因为如果这些资源是正确的，是应该允许加载并且显示在页面上的。&lt;/p&gt;
&lt;p&gt;所以浏览器对于静态资源又增加了一个 MIME 类型的检查。例如上面的 link 标签，我们在 ref 里申明了请求是一个 css 文件，但是浏览器在收到服务器响应的 Content-Type 是 text/html，这时浏览器就会直接将响的内容丢弃。&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.chromestatus.com/feature/5629709824032768&quot;&gt;Cross-Origin Read Blocking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.chromium.org/developers/design-documents/blocking-cross-site-documents&quot;&gt;Older Design document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>