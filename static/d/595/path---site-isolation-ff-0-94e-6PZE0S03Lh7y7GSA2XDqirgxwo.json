{"data":{"site":{"siteMetadata":{"title":"M.NKEY.CO","author":"p10y"}},"markdownRemark":{"id":"cc877e8b-27c1-54f3-ac8a-6b22b172624b","excerpt":"\nChrome 67 以后浏览器会默认启用名为 Site Isolation 的安全功能于避免之前的 Meltdown 和 Spectre \b 等旁路攻击\n\n","html":"<p>Chrome 67 以后浏览器会默认启用名为 Site Isolation 的安全功能于避免之前的 Meltdown 和 Spectre \b 等旁路攻击</p>\n<!-- more -->\n<h2>CPU 预执行</h2>\n<p>从所周知的，CPU 的速度比内存的读写快非常多，所以为了提高 CPU 的利用率人们想到 <strong>预执行</strong> 这个方案。比如下面这段代码，</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>正常的流程是先执行 if 的条件判断，如果成功再执行加法运算。而预执行的流程则是直接先把加运算执行，如果判断成功就保留结果，不成功则抛弃这个结果。</p>\n<p>而这时我们把 if 代码块改为一个数组的访问,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通常我们访问的索引超出了这个数组的长度，程序检查后就会返回 <strong>undefined</strong>。但是预执行是 CPU 的行为，所以这里就会跳过程序的检测，直接读到内存中其他块的内容。于是就造成了敏感信息泄露的风险。</p>\n<h2>进程模型</h2>\n<p>Chrome 之前的进程模型叫做 process-per-site-instance (一个 Tab 一个进程)，现在引入了一个新的模型 site-per-process (\b 一个站点一个进程)。</p>\n<p>这两个看起来似乎差不多，因为通常一个 Tab 只会有一个站点的内容，但是我们可以通过 iframe 去引用非本站的页面，这样就能将非本站的内容读入到当前的进程中。</p>\n<h2>Cross-Origin Read Blocking (CORB)</h2>\n<p>在通进程模型限制让不同站点的页面在不同进程以后，我们仍然可以通过其他手段去读取其他页面的内容。例如黑客在扫描内网服务时，通常会使用 img / link / video 等等标签去尝试加在内网页面以探测内网启用的服务。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://192.168.0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这时这部分资源浏览器在尝试解析的时候，发现格式不正确解析失败，但是这些内容仍然会驻留在当前进程中，就可以通过上提到的旁路攻击去尝试读那部分内存。</p>\n<p>但是我们不能限制非同源的静态资源，\b 或者将这些静态资源也分割到不同进程中去，因为如果这些资源是正确的，\b 是应该允许加载并且显示在页面上的。</p>\n<p>所以浏览器对于静态资源又增加了一个 MIME 类型的检查。例如上面的 link 标签，我们在 ref 里申明了请求是一个 css 文件，但是浏览器在收到服务器响应的 Content-Type 是 text/html，这时浏览器就会直接将响的内容丢弃。</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.chromestatus.com/feature/5629709824032768\">Cross-Origin Read Blocking</a></li>\n<li><a href=\"https://www.chromium.org/developers/design-documents/blocking-cross-site-documents\">Older Design document</a></li>\n</ul>","frontmatter":{"title":"Site Isolation","date":"October 01, 2018"}}},"pageContext":{"slug":"/site-isolation/","previous":null,"next":{"fields":{"slug":"/poor-millennials/"},"frontmatter":{"title":"MILLENNIALS ARE SCREWED"}}}}